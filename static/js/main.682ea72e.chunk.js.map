{"version":3,"sources":["components/WelcomeBar/WelcomeBar.js","components/TextCookie/TextCookie.js","components/Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["WelcomeBar","className","Component","TextCookie","displayNum","this","props","returnText","Hero","postTitle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+WAkBeA,G,6LAbP,OACI,yBAAKC,UAAU,cACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,cAAd,kCAEF,yBAAKA,UAAU,UACb,wBAAIA,UAAU,iBAAd,2E,GARSC,cCiEVC,G,6LAVX,OACE,yBAAKF,UAAU,cACb,wBAAIA,UAAU,SArCK,OADFG,EAsCkBC,KAAKC,MAAMF,YAzDzC,yBAsBqB,MAAfA,EApBN,gBAsBqB,MAAfA,EApBN,iBAsBqB,MAAfA,EApBN,gBAsBqB,MAAfA,EApBN,UAsBqB,MAAfA,EApBN,cAEA,eA8CL,uBAAGH,UAAU,QArBjB,SAAoBG,GAChB,MAAmB,MAAfA,EArCA,kLAuCsB,MAAfA,EArCP,0jBAuCsB,MAAfA,EArCP,0iBAuCsB,MAAfA,EArCP,idAuCsB,MAAfA,EArCP,mHAuCsB,MAAfA,EArCP,meAEA,4pBA6CiBG,CAAWF,KAAKC,MAAMF,cAvC/C,IAAqBA,M,GAJAF,cCGVM,E,iLAfX,OACE,yBAAKP,UAAU,QACb,wBAAIA,UAAU,aAAaI,KAAKC,MAAMG,WACtC,kBAAC,EAAD,CAAYL,WAAW,MACvB,kBAAC,EAAD,CAAYA,WAAW,MACvB,kBAAC,EAAD,CAAYA,WAAW,MACvB,kBAAC,EAAD,CAAYA,WAAW,MACvB,kBAAC,EAAD,CAAYA,WAAW,MACvB,kBAAC,EAAD,CAAYA,WAAW,MACvB,kBAAC,EAAD,CAAYA,WAAW,W,GAXZF,aCiBJQ,E,iLAbX,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAMQ,UAAU,oC,GATRP,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.682ea72e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './WelcomeBar.css';\n\nclass WelcomeBar extends Component {\n    render() {\n        return (\n            <div className=\"welcomeBar\">\n              <div className=\"barOne\">\n                <h1 className=\"headerText\">The Product Management Intern</h1>\n              </div>\n              <div className=\"barTwo\">\n                <h3 className=\"subHeaderText\">How to get a product management internship and what they are like</h3>\n              </div>\n            </div>\n          );\n    }\n}\n\nexport default WelcomeBar;","import React, { Component } from 'react';\nimport './TextCookie.css';\n\nlet title0 = \"Ghosts and Rejections:\"\nlet text0 = \"I applied to 58 different companies for product management internships for the summer of 2020. I was ghosted by 46% of these companies and immediately rejected by another 37%.\"\nlet title1 = \"First Rounds:\"\nlet text1 = \"I got to the first round of 12% or 7 of the 58 companies I applied to. Of the seven first round interviews, five were relatively short calls with recruiters about why I wanted to work at the company, what strengths and weaknesses were, if I was eligible to work in the United States, etc. Two of the first round interviews were take-home assignments. The take home assignments were questions like “improve a product that you use every day with mock-ups.” Or, “What are the fundamental problems that Airbnb solves and extend one of their features.”\"\nlet title2 = \"Second Rounds:\"\nlet text2 = \"Of my seven first rounds, I moved on to four second rounds. For one second round I was given another take-home. For the other three seconds rounds, they were what I would call “product interviews” between one to two hours with one to three interviewers. The interviews had questions about what my favorite products were, what I would do to change them, explaining my resume and my past work, talking about key metrics products should track. I used the book Decode and Conquer to prepare for these types of interviews and it was very helpful.\"\nlet title3 = \"Final Rounds:\"\nlet text3 = \"I made it to the final round of 5% (3 firms) of the original companies that I applied for (one of which the final round was the second round). The interviews were pretty much the same at the second round except they were all two hours with three different interviewers. The format was pretty much the same in that the first person you would talk to would warm you up by asking about your resume and then the next two would ask you more pointed product questions.\"\nlet title4 = \"Offers:\"\nlet text4 = \"In the end, I only got one offer from my 58 applications (1.72%) and I liked the company a lot so I accepted it.\"\nlet title5 = \"Take-Aways:\"\nlet text5 = \"The more time a company invests in you, the more likely they are to give you an offer. Having their employees actually take time to interview says a lot more than them just sending you a take-home. This is really a numbers game. Start early and try to get into a routine of applying to 10-20 places every week on a certain day. I found that companies that require you to make a Workday account or another account to apply to their internship generally aren’t worth your time.\"\nlet title6 = \"Reflection:\"\nlet text6 = \"This process really sucked. I was pretty down in the dumps when I kept getting denied from company after company. I would make it really far at one firm only to be rejected again. I think part of this came from my experience with applying to colleges where I applied to about 13 schools and got into most of them. With applying to tech internships, the hit rate is just so much lower and that’s part of the game. The offer I got was from a cool startup that got bought from a large corporation which is dope because it’s a cool work environment without the lack of job security a startup usually has. I guess things have a way of working out in the end :)\"\n\nclass TextCookie extends Component {\n  \n  render() {\n    \n    function returnTitle(displayNum) {\n        if (displayNum === \"0\") {\n            return title0\n        } else if (displayNum === \"1\") {\n            return title1\n        } else if (displayNum === \"2\") {\n            return title2\n        } else if (displayNum === \"3\") {\n            return title3\n        } else if (displayNum === \"4\") {\n            return title4\n        } else if (displayNum === \"5\") {\n            return title5\n        } else {\n            return title6\n        }\n    }\n\n    function returnText(displayNum) {\n        if (displayNum === \"0\") {\n            return text0\n        } else if (displayNum === \"1\") {\n            return text1\n        } else if (displayNum === \"2\") {\n            return text2\n        } else if (displayNum === \"3\") {\n            return text3\n        } else if (displayNum === \"4\") {\n            return text4\n        } else if (displayNum === \"5\") {\n            return text5\n        } else {\n            return text6\n        }\n    }\n\n    return (\n      <div className=\"textCookie\">\n        <h1 className=\"title\">{returnTitle(this.props.displayNum)}</h1>\n        <p className=\"text\">{returnText(this.props.displayNum)}</p>\n        \n      </div>\n    );\n  }\n}\n\nexport default TextCookie","import React, { Component } from 'react';\nimport './Hero.css';\nimport TextCookie from '../TextCookie/TextCookie';\n\nclass Hero extends Component {\n  render() {\n    return (\n      <div className=\"hero\">\n        <h1 className=\"heroTitle\">{this.props.postTitle}</h1>\n        <TextCookie displayNum=\"0\"/>\n        <TextCookie displayNum=\"1\"/>\n        <TextCookie displayNum=\"2\"/>\n        <TextCookie displayNum=\"3\"/>\n        <TextCookie displayNum=\"4\"/>\n        <TextCookie displayNum=\"5\"/>\n        <TextCookie displayNum=\"6\"/>\n      </div>\n    );\n  }\n}\n\nexport default Hero;\n\n// Applications [50] Confirmation Email\n// Applications [7] Ghosted\n// Confirmation Email [20] Ghosted\n// Confirmation Email [21] Rejected\n// Confirmation Email [5] Phone Screen\n// Confirmation Email [2] Given Take-Home\n// Phone Screen [1] Given Take-Home\n// Given Take-Home [1] Product Interview\n// Given Take-Home [2] Rejected\n// Phone Screen [2] Product Interview\n// Product Interview [2] Rejected\n// Product Interview [1] Offer","import React, { Component } from 'react';\nimport './App.css';\nimport WelcomeBar from './components/WelcomeBar/WelcomeBar';\nimport Hero from './components/Hero/Hero';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"containerOne\">\n          <WelcomeBar/>\n        </div>\n        <div className=\"containerTwo\">\n          <Hero postTitle=\"How I Got a PM Internship\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}